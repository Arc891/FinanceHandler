name: Discord Finance Bot CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    env:
      # Mask any potential token-like values in logs
      DISCORD_TOKEN: "placeholder_token_for_ci"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Create data directories
        run: |
          mkdir -p data/sessions
          mkdir -p data/uploads
          echo "‚úÖ Data directories created"

      - name: Setup configuration
        run: |
          cp src/config_settings.example.py src/config_settings.py
          echo "‚úÖ Configuration file created from template"
          
          # Ensure no real secrets are in the template
          if grep -q "your_discord_token_here" src/config_settings.py; then
            echo "‚úÖ Using safe placeholder values"
          else
            echo "‚ùå Template may contain real values"
            exit 1
          fi

      - name: Test imports
        run: |
          python -c "
          import sys
          import os
          sys.path.append('src')
          
          try:
              from config_settings import *
              print('‚úÖ Config imports successful')
          except Exception as e:
              print(f'‚ùå Config import error: {e}')
              sys.exit(1)

          try:
              import bot_commands
              print('‚úÖ Bot commands module imports successful')
          except Exception as e:
              print(f'‚ùå Bot commands import error: {e}')
              sys.exit(1)

          try:
              from finance_core.export import process_csv_file
              from finance_core.session_management import session_exists, SESSION_DIR
              from finance_core.csv_helper import load_transactions_from_csv
              print('‚úÖ Finance core modules import successful')
              print(f'‚úÖ Session directory resolved to: {SESSION_DIR}')
          except Exception as e:
              print(f'‚ùå Finance core import error: {e}')
              sys.exit(1)

          print('üéâ All imports successful!')
          "

      - name: Test configuration
        run: |
          python -c "
          import sys
          sys.path.append('src')
          from config_settings import DISCORD_TOKEN, DAILY_REMINDER_TIME, UPLOAD_DIR, SESSION_DIR
          print(f'Token placeholder: {DISCORD_TOKEN}')
          print(f'Reminder time: {DAILY_REMINDER_TIME}')
          print(f'Upload directory: {UPLOAD_DIR}')
          print(f'Session directory: {SESSION_DIR}')
          print('‚úÖ Configuration test passed')
          "

      - name: Test data directory structure
        run: |
          python -c "
          import sys
          import os
          sys.path.append('src')

          from finance_core.session_management import SESSION_DIR
          from config_settings import UPLOAD_DIR

          print(f'Session directory resolved to: {SESSION_DIR}')
          print(f'Upload directory configured as: {UPLOAD_DIR}')

          # Check if directories exist
          print(f'Session directory exists: {os.path.exists(SESSION_DIR)}')
          upload_abs_path = os.path.join(os.getcwd(), UPLOAD_DIR)
          print(f'Upload directory exists: {os.path.exists(upload_abs_path)}')

          # Test path independence - run from different directories
          os.chdir('src')
          from finance_core.session_management import SESSION_DIR as session_from_src
          print(f'Session directory from src/: {session_from_src}')

          if SESSION_DIR == session_from_src:
              print('‚úÖ Path resolution is working directory independent')
          else:
              print('‚ùå Path resolution is working directory dependent')
              sys.exit(1)

          print('‚úÖ Data directory structure test passed')
          "

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Bandit Security Scan
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Check for secrets
        run: |
          echo "üîç Checking for potential secrets in codebase..."
          
          # Check if any actual secrets might be committed (not in example files)
          if grep -r "discord_token\|bot_token\|api_key" src/ --exclude-dir=__pycache__ --exclude="*.example.*" --exclude="config_settings.py" || true; then
            echo "‚ö†Ô∏è Potential secrets found in code"
          else
            echo "‚úÖ No obvious secrets found"
          fi
          
          # Check for hardcoded tokens or keys
          if grep -rE "(token|key|secret|password)\s*=\s*['\"][^'\"]{20,}" src/ --exclude-dir=__pycache__ --exclude="*.example.*" || true; then
            echo "‚ö†Ô∏è Potential hardcoded credentials found"
          else
            echo "‚úÖ No hardcoded credentials detected"
          fi
          
          # Verify .env file is not committed
          if [ -f ".env" ]; then
            echo "‚ùå .env file should not be committed"
            exit 1
          else
            echo "‚úÖ .env file not found in repository (good)"
          fi
          
          # Check gitignore for sensitive files
          if grep -q "\.env\|config_settings\.py\|google_service_account\.json" .gitignore 2>/dev/null; then
            echo "‚úÖ Sensitive files properly ignored in .gitignore"
          else
            echo "‚ö†Ô∏è Consider adding sensitive files to .gitignore"
          fi

      - name: Validate environment configuration
        run: |
          python -c "
          import sys
          import os
          sys.path.append('src')
          
          # Test that config uses environment variables properly
          from config_settings import DISCORD_TOKEN, GOOGLE_CREDENTIALS_PATH
          
          # Ensure default values are placeholders, not real secrets
          if DISCORD_TOKEN and DISCORD_TOKEN != 'your_discord_token_here' and len(DISCORD_TOKEN) > 50:
              print('‚ùå DISCORD_TOKEN appears to contain a real token')
              sys.exit(1)
          else:
              print('‚úÖ DISCORD_TOKEN is using placeholder/env var')
              
          print('‚úÖ Environment configuration validation passed')
          "
